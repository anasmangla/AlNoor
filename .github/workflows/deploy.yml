name: Deploy to Bluehost (SSH)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      deploy_path:
        description: "Remote folder (e.g., ~/public_html/alnoor)"
        required: false
      branch:
        description: "Git branch to deploy"
        default: "main"
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.2.2
        with:
          host:         ${{ secrets.SSH_HOST }}
          username:     ${{ secrets.SSH_USER }}
          key:          ${{ secrets.SSH_KEY }}
          passphrase:   ${{ secrets.SSH_PASSPHRASE }}
          port:         ${{ secrets.SSH_PORT }}
          password:     ${{ secrets.SSH_PASSWORD }}
          fingerprint:  ${{ secrets.SSH_FINGERPRINT }}
          use_insecure_cipher: true # required for cPanel servers that only offer diffie-hellman-group-exchange key exchange
          debug: true
          script: |
            set -euo pipefail

            # Resolve deploy path: dispatch input > repo variable > required
            DEPLOY_PATH="${{ github.event.inputs.deploy_path || vars.DEPLOY_PATH || '' }}"
            if [ -z "$DEPLOY_PATH" ]; then
              echo "DEPLOY_PATH not set. Provide it as a workflow input or set vars.DEPLOY_PATH."; exit 1
            fi

            BRANCH="${{ github.event.inputs.branch || 'main' }}"

            echo "Deploy path: $DEPLOY_PATH"
            echo "Branch: $BRANCH"

            mkdir -p "$DEPLOY_PATH"
            cd "$DEPLOY_PATH"

            # Initialize or update Git working tree
            if [ ! -d .git ]; then
              git init
              git remote add origin "https://github.com/${{ github.repository }}.git"
              git fetch --depth=1 origin "$BRANCH"
              git checkout -f FETCH_HEAD
            else
              git fetch origin "$BRANCH"
              git reset --hard "origin/$BRANCH"
              git clean -fd
            fi

            # Frontend build (Next.js)
            if [ -d frontend ] && command -v npm >/dev/null 2>&1; then
              cd frontend
              (npm ci --omit=dev || npm install --production || true)
              (npm run build || true)
              cd ..
            fi

            # Backend deps (FastAPI)
            if [ -d backend ]; then
              cd backend
              if command -v pip3 >/dev/null 2>&1; then
                (pip3 install -r requirements.txt || true)
              fi
              # Trigger Passenger restart if present
              mkdir -p tmp && touch tmp/restart.txt || true
              cd ..
            fi

